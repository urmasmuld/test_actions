openapi: 3.0.2
info:
  title: PlantTracker_Team2
  version: 0.1.0
paths:
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `User` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - /users
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                'Invalid email: {reason}':
                  value: 'Invalid email: {reason}'
                Email and password are required:
                  value: Email and password are required
                Password must be at least 8 characters long:
                  value: Password must be at least 8 characters long
                Email must be in a valid format:
                  value: Email must be in a valid format
          description: Client side error
        '409':
          content:
            text/html:
              examples:
                Email already exists:
                  value: Email already exists
          description: The email provided already exists in the system.
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of a `User`.
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `Session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      tags:
        - /sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                Email and password are required:
                  value: Email and password are required
          description: Bad Request
        '401':
          content:
            text/html:
              examples:
                Invalid password:
                  value: Invalid password
          description: Unauthorized
        '404':
          content:
            text/html:
              examples:
                User not found:
                  value: User not found
          description: Not Found
      operationId: createSession
      summary: Create a Session
      description: 'Creates a new instance of a `Session`, signing the user in. Returns session ID.'
    delete:
      tags:
        - /sessions
      responses:
        '204':
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                Invalid Authorization header:
                  value: Invalid Authorization header
          description: Bad Request
        '401':
          content:
            text/html:
              examples:
                Authorization header is missing:
                  value: Authorization header is missing
                Invalid session id:
                  value: Invalid session id
          description: Unauthorized
      security:
        -
          Bearer: [ ]
      summary: Destroy a Session
      description: 'Destroys a `Session`, signing the user out. Reads the session ID from Authorization header.'
  /plants:
    summary: Path used to manage the list of plants.
    description: >-
      The REST endpoint/path used to list and create zero or more `Plant` entities.  This path contains
      a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - /plants
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          description: Successful response - returns an array of `Plant` entities.
        '400':
          content:
            text/html:
              examples:
                Invalid Authorization header:
                  value: Invalid Authorization header
          description: Bad Request
        '401':
          content:
            text/html:
              examples:
                Authorization header is missing:
                  value: Authorization header is missing
                Invalid session id:
                  value: Invalid session id
          description: Unauthorized
      security:
        -
         Bearer: [ ]
      operationId: getPlants
      summary: List All Plants
      description: Gets a list of all `Plant` entities.
    post:
      requestBody:
        description: A new `Plant` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
        required: true
      tags:
        - /plants
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          description: Successful response
        '400':
          content:
            text/html:
              examples:
                Please enter a name:
                  value: Please enter a name
                Please enter a description:
                  value: Please enter a description
                Name is too long:
                  value: Name is too long
          description: Client side error
      security:
          -
            Bearer: [ ]
      operationId: postPlant
      summary: Add a Plant
      description: Creates a new instance of a `Plant`.
components:
  schemas:
    User:
      title: Root Type for User
      description: ''
      type: object
      properties:
        id:
          format: int32
          description: A field that represents the unique identifier of the user.
          type: integer
          example: '12345'
        email:
          description: A field that represents the email address of the user.
          type: string
          example: john.doe@example.com
        password:
          description: A field that represents the password of the user.
          type: string
          example: MySecurePassword123
      example:
        id: 3
        email: email@example.com
        password: pass123
    Session:
      title: Root Type for Session
      description: ''
      type: object
      properties:
        id:
          type: string
        userId:
          format: int32
          type: integer
      example:
        id: 38d1d51c-7d3c-48d3-a5ab-f51ea2379a9e
        userId: 1
    Credentials:
      title: Root Type for Credentials
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: admin
        password: KollneKollne
    Plant:
      title: Root Type for Plant
      description: ''
      type: object
      properties:
        id:
          format: int32
          description: A field that represents the unique identifier of the entity.
          type: integer
          example: '123'
        name:
          description: A field that represents the name of the entity.
          type: string
          example: V천ilill
        description:
          description: A field that represents the description of the entity.
          type: string
          example: See on v천ilill
        userId:
          format: int32
          description: A field that represents the unique identifier of the user that the entity belongs to.
          type: integer
          example: '12345'
      example:
        id: 1
        name: V천ilill
        description: See on v천ilill
        userId: 1
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  -
    name: /users
    description: ''
  -
    name: /sessions
    description: ''

    name: /plants
    description: ''
